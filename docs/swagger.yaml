definitions:
  schema.Auth:
    properties:
      password:
        default: "123456"
        type: string
      username:
        default: demo
        type: string
    type: object
  schema.Book:
    properties:
      author:
        maxLength: 255
        type: string
      created_at:
        type: string
      id:
        type: string
      meta:
        $ref: '#/definitions/schema.Meta'
      status:
        type: integer
      title:
        maxLength: 255
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    required:
    - author
    - meta
    - status
    - title
    - user_id
    type: object
  schema.BookListResponse:
    properties:
      count:
        type: integer
      data:
        items:
          $ref: '#/definitions/schema.Book'
        type: array
      limit:
        type: integer
      offset:
        type: integer
    type: object
  schema.CreateBook:
    properties:
      author:
        maxLength: 255
        type: string
      meta:
        $ref: '#/definitions/schema.Meta'
      status:
        type: integer
      title:
        maxLength: 255
        type: string
      user_id:
        type: string
    required:
    - author
    - meta
    - status
    - title
    - user_id
    type: object
  schema.CreateUser:
    properties:
      email:
        maxLength: 150
        type: string
      first_name:
        maxLength: 100
        type: string
      is_active:
        type: boolean
      is_admin:
        type: boolean
      last_name:
        maxLength: 100
        type: string
      password:
        maxLength: 100
        minLength: 10
        type: string
      username:
        maxLength: 50
        minLength: 5
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - username
    type: object
  schema.ErrorResponse:
    properties:
      msg:
        type: string
    type: object
  schema.JWT:
    properties:
      admin:
        type: boolean
      exp:
        type: integer
      user_id:
        type: string
    type: object
  schema.Meta:
    properties:
      description:
        type: string
      picture:
        type: string
      rating:
        maximum: 10
        minimum: 1
        type: integer
    type: object
  schema.TokenResponse:
    properties:
      access_token:
        type: string
      msg:
        type: string
      redirect_url:
        type: string
    type: object
  schema.UpdateUser:
    properties:
      first_name:
        maxLength: 100
        type: string
      is_active:
        type: boolean
      is_admin:
        type: boolean
      last_name:
        maxLength: 100
        type: string
    required:
    - first_name
    - last_name
    type: object
  schema.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      is_admin:
        type: boolean
      last_name:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  schema.UserListResponse:
    properties:
      count:
        type: integer
      data:
        items:
          $ref: '#/definitions/schema.User'
        type: array
      limit:
        type: integer
      offset:
        type: integer
    type: object
info:
  contact: {}
  description: Fiber go web framework based REST API boilerplate
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Fiber Go API
  version: "1.0"
paths:
  /api/v1/admin/users:
    get:
      consumes:
      - application/json
      description: Get all users.
      parameters:
      - description: offset
        in: query
        name: offset
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schema.UserListResponse'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "401":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get all users
      tags:
      - Admin
    post:
      consumes:
      - application/json
      description: Create a new user.
      parameters:
      - description: Create new user
        in: body
        name: createuser
        required: true
        schema:
          $ref: '#/definitions/schema.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/schema.User'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "401":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "409":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: create a new user
      tags:
      - Admin
  /api/v1/admin/users/{id}:
    delete:
      consumes:
      - application/json
      description: delete user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            type: object
        "401":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: delete a user
      tags:
      - Admin
    get:
      consumes:
      - application/json
      description: a user.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.User'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "401":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get a user
      tags:
      - Admin
    put:
      consumes:
      - application/json
      description: first_name, last_name, is_active, is_admin only
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Update a user
        in: body
        name: updateuser
        required: true
        schema:
          $ref: '#/definitions/schema.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.User'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "401":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: update a user
      tags:
      - Admin
  /api/v1/auth/jwt:
    post:
      consumes:
      - application/json
      description: Get current JWT.
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/schema.JWT'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "401":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: JWT
      tags:
      - Auth
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: 'Set new access token to cookies and redirect. Demo username: demo,
        password: 123456'
      parameters:
      - description: Request for token
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/schema.Auth'
      - description: Redirect url after login
        in: query
        name: redirect_url
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/schema.TokenResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "401":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
      summary: login
      tags:
      - Auth
  /api/v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Clean cookies
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            type: object
        "400":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "401":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Logout
      tags:
      - Auth
  /api/v1/books:
    get:
      consumes:
      - application/json
      description: Get all books.
      parameters:
      - description: offset
        in: query
        name: offset
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.BookListResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
      summary: get all books
      tags:
      - Book
    post:
      consumes:
      - application/json
      description: Create a new book.
      parameters:
      - description: Create new book
        in: body
        name: createbook
        required: true
        schema:
          $ref: '#/definitions/schema.CreateBook'
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/schema.Book'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "401":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: create a new book
      tags:
      - Book
  /api/v1/books/{id}:
    delete:
      consumes:
      - application/json
      description: delete book
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            type: object
        "401":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: delete a book
      tags:
      - Book
    get:
      consumes:
      - application/json
      description: a book.
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Book'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
      summary: get a book
      tags:
      - Book
    put:
      consumes:
      - application/json
      description: update book
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      - description: Update a book
        in: body
        name: updatebook
        required: true
        schema:
          $ref: '#/definitions/schema.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Book'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "401":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: update a book
      tags:
      - Book
  /api/v1/users/me:
    get:
      consumes:
      - application/json
      description: a user me.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.User'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "401":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/schema.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: get a user me
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
